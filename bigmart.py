# -*- coding: utf-8 -*-
"""BigMart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f1mL4PmyDdOMFztrAqzvrUbyRF0onG9a
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import metrics

from xgboost import XGBRegressor

"""# New Section"""

Mart=pd.read_csv('/content/drive/MyDrive/Data/Train.csv')

Mart.head()

Mart.shape

Mart.info()

"""Item_Weight and Outlet_Size are short of null values"""

Mart.isnull().sum()

#filling Item_weight Null values 

Mart['Item_Weight'].mean()

Mart['Item_Weight'].fillna(Mart['Item_Weight'].mean(), inplace=True)

Mart.isnull().sum()

#filling Outlet_Size

mode_OutletSize = Mart.pivot_table(values='Outlet_Size', columns='Outlet_Type', aggfunc=(lambda x: x.mode()[0]))

print(mode_OutletSize)

missing_val= Mart['Outlet_Size'].isnull()

print(missing_val)

Mart.loc[missing_val,'Outlet_Size']= Mart.loc[missing_val, 'Outlet_Type'].apply(lambda x:mode_OutletSize[x])

Mart.isnull().sum()

#Analysis

Mart.describe()

plt.figure(figsize=(6,6))
sns.displot(Mart['Item_Weight'])
plt.show();

plt.figure(figsize=(6,6))
sns.displot(Mart['Item_Visibility'])
plt.show();

plt.figure(figsize=(6,6))
sns.displot(Mart['Item_MRP'])
plt.show();

plt.figure(figsize=(6,6))
sns.displot(Mart['Item_Outlet_Sales'])
plt.show();

plt.figure(figsize=(6,6))
sns.countplot(x='Outlet_Establishment_Year', data= Mart)
plt.show();

plt.figure(figsize=(6,6))
sns.countplot(x='Item_Fat_Content', data= Mart)
plt.show();

plt.figure(figsize=(25,10))
sns.countplot(x='Item_Type', data= Mart)
plt.show();

plt.figure(figsize=(10,6))
sns.countplot(x='Outlet_Type', data= Mart)
plt.show();

plt.figure(figsize=(10,6))
sns.countplot(x='Outlet_Size', data= Mart)
plt.show();

#Mart.Outlet_Size.dtype
Mart.info()

#Preprocessing

Mart['Item_Fat_Content'].value_counts()

Mart.replace({'Item_Fat_Content':{'low fat':'Low Fat','LF':'Low Fat', 'reg':'Regular'}}, inplace=True)

Mart['Item_Fat_Content'].value_counts()

encoder = LabelEncoder()

Mart['Item_Identifier'] = encoder.fit_transform(Mart['Item_Identifier'])
Mart['Item_Fat_Content'] = encoder.fit_transform(Mart['Item_Fat_Content'])
Mart['Item_Type'] = encoder.fit_transform(Mart['Item_Type'])
Mart['Outlet_Identifier'] = encoder.fit_transform(Mart['Outlet_Identifier'])
Mart['Outlet_Size'] = encoder.fit_transform(Mart['Outlet_Size'])
Mart['Outlet_Location_Type'] = encoder.fit_transform(Mart['Outlet_Location_Type'])
Mart['Outlet_Type'] = encoder.fit_transform(Mart['Outlet_Type'])

Mart

#spliting
X= Mart.drop(columns='Item_Outlet_Sales', axis=1)
Y= Mart['Item_Outlet_Sales']

print(X)

print(Y)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2, random_state=2)

#Model Training

Model=XGBRegressor(tree_method='auto', objective='reg:squarederror')

Model.fit(X_train,Y_train)

training_prediction=Model.predict(X_train)

r2_train_score=metrics.r2_score(Y_train,training_prediction)

print(r2_train_score)

test_prediction=Model.predict(X_test)

r2_test_score=metrics.r2_score(Y_test,test_prediction)

print('Test Score:', r2_test_score)

"""Questions"""







